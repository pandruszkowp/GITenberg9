//参阅：https://github.com/bintray/gradle-bintray-plugin

//用于发布项目到maven仓库
apply plugin: 'maven-publish'
//用于上传项目到jcenter
apply plugin: 'com.jfrog.bintray'

/**
 * generate xxx-classes.jar
 */
task releaseJar(type: Jar) {
    //classifier = 'classes'
    getArchiveClassifier().set('classes')
    from 'build/intermediates/classes/release/'
    exclude '**/BuildConfig.class', '**/R.class'
    exclude {
        it.name.startsWith('R$')
    }
}

/**
 * generate xxx-sources.jar
 */
task sourcesJar(type: Jar) {
    //classifier = 'sources'
    getArchiveClassifier().set('sources')
    from android.sourceSets.main.java.srcDirs
}

/**
 * generate javadoc
 */
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    //classpath += configurations.compile
    classpath += configurations.implementation
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    //ignore error
    failOnError = false
}

/**
 * generate xxx-javadoc.jar
 */
task javadocJar(type: Jar, dependsOn: javadoc) {
    //classifier = 'javadoc'
    getArchiveClassifier().set('javadoc')
    from javadoc.destinationDir
}

/**
 * javadoc configure
 */
javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        title project.pomArtifactId
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            artifactId project.pomArtifactId
            artifact "${buildDir}/outputs/aar/${project.pomArtifactId}-release.aar"
            artifact releaseJar
            artifact javadocJar
            artifact sourcesJar

            pom.withXml {
                Node root = asNode()
                root.appendNode('name', project.pomArtifactId)
                root.appendNode('description', project.pomDescription)
                root.appendNode('url', SITE_URL)

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', SITE_URL)

                def scm = root.appendNode('scm')
                scm.appendNode('url', GIT_URL)
                scm.appendNode('connection', "scm:git:${GIT_URL}")
                scm.appendNode('developerConnection', "scm:git:${GIT_URL}")

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', "The Apache Software License, Version 2.0")
                license.appendNode('url', "http://www.apache.org/licenses/LICENSE-2.0.txt")
                license.appendNode('distribution', "repo")

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', DEVELOPER_ID)
                developer.appendNode('name', DEVELOPER_NAME)
                developer.appendNode('email', DEVELOPER_EMAIL)

                // Define this explicitly if using implementation or api configurations
                def dependenciesNode = root['dependencies'][0] ?: root.appendNode('dependencies')

                def addDependency = {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.group && it.name && it.version) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        if (it.hasProperty('optional') && it.optional) {
                            dependencyNode.appendNode('optional', 'true')
                        }
                    }
                }

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each addDependency
                configurations.api.allDependencies.each addDependency

            }
        }
    }
}

bintray {

    // You should configure "bintray.user" and "bintray.apiKey" in the gradle.properties
    // that in gradle cache directory (～/.gradle/gradle.properties)
    try {
        user = getProperty("bintray.user")
        key = getProperty("bintray.apikey")
    } catch (Exception e) {
        println("bintray exception: " + e)
        user = ""
        key = ""
    }

    //对应前面的publishing.publications.mavenJava
    publications = ['MyPublication']
    //[Default: false] Whether to run this as dry-run, without deploying
    dryRun = false
    //[Default: false] Whether version should be auto published after an upload
    publish = true
    //[Default: false] Whether to override version artifacts already published
    override = true

    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        //existing repository in bintray to add the artifacts to (for example: 'generic', 'maven' etc)
        repo = "maven"
        //package name
        name = project.pomArtifactId
        //发布到中央仓库上的项目说明
        desc = project.pomDescription
        //an optional organization name when the repo belongs to one of the user's orgs. If not added will use 'BINTRAY_USER' by default
        userOrg = DEVELOPER_ORG
        //your package licenses (mandatory if the package doesn't exist yet and must be created, and if the package is an OSS package; optional otherwise)
        licenses = LICENSES
        //your VCS URL (mandatory if the package doesn't exist yet and must be created, and if the package is an OSS package; optional otherwise)
        vcsUrl = GIT_URL
        //项目主页
        websiteUrl = SITE_URL
        //项目讨论页
        issueTrackerUrl = ISSUE_URL
        publicDownloadNumbers = true
        //Optional Github readme file
        githubReleaseNotesFile = 'README.md'

        //Optional version descriptor
        version {
            //Bintray logical version name
            name = project.pomVersion
            //Optional - Version-specific description
            desc = project.pomDescription
            //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            released = new Date()
            //版本控制Tag名称
            vcsTag = project.version
            //Optional configuration for GPG signing
            gpg {
                //Determines whether to GPG sign the files. The default is false
                sign = false
                //Optional. The passphrase for GPG signing
                passphrase = 'passphrase'
            }
            //Optional configuration for Maven Central sync of the version
            mavenCentralSync {
                //[Default: true] Determines whether to sync the version to Maven Central
                sync = false
                //OSS user token: mandatory
                user = 'userToken'
                //OSS user password: mandatory
                password = 'paasword'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
                close = '1'
            }
        }

    }

}
