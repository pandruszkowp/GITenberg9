apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

version = PROJ_VERSION   //版本号
group = PROJ_GROUP    // 包名
project.archivesBaseName = PROJ_ARTIFACTID

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
        title PROJ_ARTIFACTID
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId PROJ_ARTIFACTID
            artifact javadocJar
            artifact sourcesJar

            pom.withXml {
                Node root = asNode()
                root.appendNode('name', PROJ_ARTIFACTID)
                root.appendNode('description', PROJ_DESCRIPTION)
                root.appendNode('url', PROJ_WEBSITE_URL)

                def issues = root.appendNode('issueManagement')
                issues.appendNode('system', 'github')
                issues.appendNode('url', PROJ_ISSUE_URL)

                def scm = root.appendNode('scm')
                scm.appendNode('url', PROJ_GIT_URL)
                scm.appendNode('connection', "scm:git:${PROJ_GIT_URL}")
                scm.appendNode('developerConnection', "scm:git:${PROJ_GIT_URL}")

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', "The Apache Software License, Version 2.0")
                license.appendNode('url', "http://www.apache.org/licenses/LICENSE-2.0.txt")
                license.appendNode('distribution', "repo")

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id', DEVELOPER_ID)
                developer.appendNode('name', DEVELOPER_NAME)
                developer.appendNode('email', DEVELOPER_EMAIL)

                def dependenciesNode = root.appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    if (it.group && it.name && it.version) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

afterEvaluate {
    publishing.publications.mavenJava.artifact(bundleRelease)
}

bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    publications = ['mavenJava']
    publish = true    //是否发布

    pkg {
        repo = "maven"    //上传的中央仓库名称
        name = PROJ_ARTIFACTID    //发布到中央仓库上的项目名字
        desc = PROJ_DESCRIPTION
        websiteUrl = PROJ_WEBSITE_URL   //项目主页
        issueTrackerUrl = PROJ_ISSUE_URL    //项目讨论页
        vcsUrl = PROJ_GIT_URL    //项目GIT仓库
        licenses = ["Apache-2.0"]
        publicDownloadNumbers = true
        version {
            name = PROJ_VERSION
            desc = PROJ_DESCRIPTION
            gpg {
                sign = true    //是否GPG签名，可使用Gpg4win创建密钥文件
                passphrase = properties.getProperty("bintray.gpg.password")    //GPG签名所用密钥
            }
            mavenCentralSync {
                sync = true    //是否同步到Maven Central
                user = properties.getProperty("sonatype.user")    //sonatype用户名
                password = properties.getProperty("sonatype.password")    //sonatype密码
                close = '1'
            }
        }
    }
}

